nameOverride: "bookstack"
# -- Same as nameOverride but for the namespace.
namespaceOverride: ""

# -- Same as nameOverride but for the component.
componentOverride: ""

# -- Same as nameOverride but for the partOf.
partOfOverride: ""

##########################################################
# Name of the application.
##########################################################
applicationName: "bookstack"

##########################################################
# Global labels
# These labels will be added on all resources,
# and you can add additional labels from below
# on individual resource
##########################################################

cronJob:
  enabled: false
  jobs:
    # db-migration:
    #   schedule: "* * * 8 *"
    #   priorityClassName: high-priority
    #   env: 
    #     KEY:
    #       value: VALUE
    #   image:
    #     repository: docker.io/nginx
    #     tag: v1.0.0
    #     digest: '' # if set to a non empty value, digest takes precedence on the tag
    #     imagePullPolicy: IfNotPresent
    #   command: ["/bin/bash"]
    #   args: ["-c","sleep 5000"]
    #   resources:
    #     requests:
    #         memory: 5Gi
    #         cpu: 1


job:
  enabled: false
  jobs:
    # db-migration:
    #   additionalPodAnnotations:
    #     helm.sh/hook: "pre-install,pre-upgrade"
    #     helm.sh/hook-weight: "-1"
    #     helm.sh/hook-delete-policy: "before-hook-creation"
    #   env: 
    #     KEY:
    #       value: VALUE
    #   image: 
    #     repository: docker.io/nginx
    #     tag: v1.0.0
    #     digest: '' # if set to a non empty value, digest takes precedence on the tag
    #     imagePullPolicy: IfNotPresent
    #   command: ["/bin/bash"]
    #   args: ["-c","sleep 5000"]
    #   resources:  
    #     requests:
    #         memory: 5Gi
    #         cpu: 1
  

##########################################################
# Deployment
##########################################################
deployment:
  enabled: true
  # By default deploymentStrategy is set to rollingUpdate with maxSurge of 25% and maxUnavailable of 25%
  # You can change type to `Recreate` or can uncomment `rollingUpdate` specification and adjust them to your usage.
  strategy:
    type: RollingUpdate
    # rollingUpdate:
    #   maxSurge: 25%
    #   maxUnavailable: 25%
  
  # Reload deployment if configMap/secret updates
  reloadOnChange: true

  # Select nodes to deploy which matches the following labels
  nodeSelector:
    # cloud.google.com/gke-nodepool: default-pool

  # Init containers which runs before the app container
  hostAliases:
  # - ip: "127.0.0.1"
  #   hostnames:
  #   - "foo.local"
  #   - "bar.local"
  # - ip: "10.1.2.3"
  #   hostnames:
  #   - "foo.remote"
  #   - "bar.remote"

  # Init containers which runs before the app container
  initContainers:
    # init-contaner:
    #   image: busybox
    #   imagePullPolicy: IfNotPresent
    #   command: ['/bin/sh']

  # Additional labels for Deployment
  additionalLabels:
    # key: value

  # Additional label added on pod which is used in Service's Label Selector
  podLabels:
    # env: prod

  # Annotations on deployments
  annotations:

  # Additional Pod Annotations added on pod created by this Deployment
  additionalPodAnnotations:
    # key: value

  # Annotations for fluentd Configurations
  fluentdConfigAnnotations:
    # fluentd:
    #   regex: hello
    #   timeFormat: world

  # Replicas to be created
  replicas:

  # Secrets used to pull image
  imagePullSecrets: ""

  # If want to mount Envs from configmap or secret
  envFrom:
  #  production-cm:
  #    type: configmap
  #    nameSuffix: my-configmap
  #  logging-config:
  #    type: configmap
  #    nameSuffix: your-configmap
  #  postgres-config:
  #    type: secret
  #    nameSuffix: postgres

  # Environment variables to be passed to the app container
  env:
    DB_HOST:
       value: "192.168.8.116"
    DB_PORT:
       value: "3306"
    DB_USER:
       value: "bookstack"
    DB_PASS:
       value: "bookstack"
    DB_DATABASE:
       value: "bookstack"
    APP_URL:
      value: "https://bookstack.local.lutherlabs.com"
    PUID:
      value: "1000"
    PGID:
      value: "1000"
    TZ:
      value: "America/Los_Angeles"
    # STORAGE_TYPE:
    #   value: "s3"
    # STORAGE_S3_KEY:
    #   value: "bookstack"
    # STORAGE_S3_SECRET:
    #   value: "bookstack"
    # STORAGE_S3_BUCKET:
    #   value: "bookstack"
    # FREQUENCY:
    #    valueFrom:
    #       configMapKeyRef:
    #          name: config
    #          key: frequency
    #  ENVIRONMENT:
    #     value: "dev"
    #  FREQUENCY:
    #     valueFrom:
    #        configMapKeyRef:
    #           name: config
    #           key: frequency
  
    # Volumes to be added to the pod
    # volumeMounts:
    #   bookstack-secure-data:
    #      mountPath: /secure-data/
    #   bookstack-public-data:
    #      mountPath: /public-data/
    # volumes:
    #   - name: bookstack-secure-data
    #     persistentVolumeClaim:
    #       claimName: bookstack-secure-data
    #   - name: bookstack-public-data
    #     persistentVolumeClaim:
    #       claimName: bookstack-public-datasomethingsomething

  # priorityClassName defines the priority class for pod scheduling
  priorityClassName: ''

  # Taint tolerations for nodes
  tolerations:
    # - key: "dedicated"
    #   operator: "Equal"
    #   value: "app"
    #   effect: "NoSchedule"

  # Pod affinity and pod anti-affinity allow you to specify rules about how pods should be placed relative to other pods.
  affinity:
  #  nodeAffinity:
  #    requiredDuringSchedulingIgnoredDuringExecution:
  #      nodeSelectorTerms:
  #      - matchExpressions:
  #        - key: disktype
  #          operator: In
  #          values:
  #          - ssd

  # Topology spread constraints
  topologySpreadConstraints:
    # - maxSkew: 1
    #   topologyKey: kubernetes.io/hostname
    #   whenUnsatisfiable: ScheduleAnyway
    #   labelSelector:
    #     matchExpressions:
    #     - key: disktype
    #       operator: In
    #       values:
    #       - ssd
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   whenUnsatisfiable: ScheduleAnyway
    #   labelSelector:
    #     matchExpressions:
    #     - key: disktype
    #       operator: In
    #       values:
    #       - ssd

  # Number of ReplicaSet versions to retain
  revisionHistoryLimit: 2

  # Image of the app container
  image:
    repository: lscr.io/linuxserver/bookstack
    tag: 'latest' # TODO: Pin to a verison
    # digest: '' # if set to a non empty value, digest takes precedence on the tag
    pullPolicy: IfNotPresent
  dnsConfig:
    # options:
    # - name: ndots
    #   value: '1'
  # Startup, Readiness and Liveness probes
  startupProbe:
    enabled: false
    failureThreshold: 30
    periodSeconds: 10
    # Must specify either one of the following field when enabled
    httpGet: {}
    exec: {}
    tcpSocket: {}
    grpc: {}

  readinessProbe:
    enabled: false
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 10
    # Must specify either one of the following field when enabled
    httpGet: {}
    # exec: {}
    # tcpSocket: {}
    # grpc: {}

  livenessProbe:
    enabled: false
    failureThreshold: 3
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
    initialDelaySeconds: 10
    # Must specify either one of the following field when enabled
    httpGet: {}
    exec: {}
    tcpSocket: {}
    grpc: {}

  # Resources to be defined for pod
  resources:
    limits:
      memory: 8192Mi
      cpu: 8
    requests:
      memory: 4096Mi
      cpu: 4

  #  Security Context at Container Level
  containerSecurityContext:
    readOnlyRootFilesystem: false
    runAsNonRoot: false

  # Add additional containers besides init and app containers
  additionalContainers:
  # - name: sidecar-contaner
  #   image: busybox
  #   imagePullPolicy: IfNotPresent
  #   command: ['/bin/sh']

  # Security Context for the pod
  securityContext:
    # fsGroup: 2000

  # Command for primary container
  command: []

  # Args for primary contaner
  args: []

  # List of ports for the primary container
  ports:
  - containerPort: 80
    name: http
    protocol: TCP
  #- containerPort: 8778
  #  name: jolokia
  #  protocol: TCP
  #- containerPort: 8443
  #  name: https
  #  protocol: TCP

  # Networking using the host network
  hostNetwork:

  # Graceful termination timeout
  terminationGracePeriodSeconds:

  # Default lifecycle configuration
  lifecycle: {}
    # Example for a preStop hook:
    # preStop:
    #   exec:
    #     command: ["/bin/bash", "-c", "sleep 20"]

##########################################################
# Add Storage volumes to the pods
##########################################################
persistence:
  enabled: false
  mountPVC: false
  mountPath: "/pv"
  name: ""
  accessMode: ReadWriteMany
  ## If defined, storageClass: <storageClass>
  ## If set to "-", storageClass: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClass spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  storageClass: "longhorn"
  additionalLabels:
    # key: "value"
  annotations:
  #  "helm.sh/resource-policy": keep
  storageSize: 30Gi
  volumeMode: ""
  volumeName: ""


##########################################################
# Service object for servicing pods
##########################################################
service:
  # TODO: Fix once replicaset is successfully starting (sans db), ingess too
  enabled: true
  additionalLabels:
    # expose: "true"

  annotations:
    # config.xposer.stakater.com/Domain: stakater.com
    # config.xposer.stakater.com/IngressNameTemplate: '{{ "{{.Service}}-{{.Namespace}}" }}'
    # config.xposer.stakater.com/IngressURLPath: /
    # config.xposer.stakater.com/IngressURLTemplate: '{{ "{{.Service}}.{{.Namespace}}.{{.Domain}}" }}'
    #   '{{ template "application.name" . }}-tls'
    # xposer.stakater.com/annotations: |-
    #   kubernetes.io/ingress.class: external-ingress
    #   ingress.kubernetes.io/rewrite-target: /
    #   ingress.kubernetes.io/force-ssl-redirect: true

  ports:
    - port: 80
      name: http
      protocol: TCP
      targetPort: http
  type: LoadBalancer

  # Set to 'None' will make this service headless
  clusterIP: None

##########################################################
# Ingress object for exposing services
##########################################################
ingress:
  enabled: false

  # Name of the ingress class
  ingressClassName: ''

  # List of host addresses to be exposed by this Ingress
  hosts:
    - host: chart-example.local
      paths:
      - path: /
      #  pathType: ''
      #  serviceName: ''
      #  servicePort: ''
  # Additional labels for this Ingress
  additionalLabels:

  # Add annotations to this Ingress
  annotations:
    # kubernetes.io/ingress.class: external-ingress
    # ingress.kubernetes.io/rewrite-target: /
    # ingress.kubernetes.io/force-ssl-redirect: true

  # TLS details for this Ingress
  tls:
    # Secrets must be manually created in the namespace.
    # - secretName: chart-example-tls
    #   hosts:
    #     - chart-example.local

##########################################################
# TODO: Eventually, use vualt for this, until then, it does nothing
# SecretProviderClass
##########################################################
secretProviderClass:
  enabled: false
  name: ""
  # name: example
  provider: ""
  # provider: vault
  vaultAddress: ""
  # vaultAddress: http://vault:8200
  roleName: ""
  # roleName: example-role
  objects: 
    #- objectName: MONGO_HOST
    #  secretPath: testing/data/mongoDb
    #  secretKey: MONGO_HOST
  secretObjects:
    #- data:
    #  - key: MONGO_HOST
    #    objectName: host
    #  secretName: secret-mongo-host
    #  type: Opaque

##########################################################
# Traefik Ingress Route
##########################################################
ingressRoute:
  enabled: true
  # subDomain: bookstack # default to ApplicationName 

##########################################################
# Role Based Access Control (RBAC)
##########################################################
rbac:
  enabled: true

  # Service Account to use by pods
  serviceAccount:
    enabled: false
    name: ""

    # Additional Labels on service account
    additionalLabels:
      # key: value

    # Annotations on service account 
    annotations:
      # key: value

  # Create Roles (Namespaced)
  roles:
  # - name: configmaps
  #   rules:
  #   - apiGroups:
  #     - ""
  #     resources:
  #     - configmaps
  #     verbs:
  #     - get
  # - name: secrets
  #   rules:
  #   - apiGroups:
  #     - ""
  #     resources:
  #     - secrets
  #     verbs:
  #     - get

##########################################################
# Additional ConfigMaps
##########################################################
configMap:
  enabled: false
  additionalLabels:
    # key: value
  annotations:
    # key: value
  files:
  #   nameSuffix of configMap
  #  code-config:
  #     key1: value1
  #     key2: value2
  #  dev-config:
  #     key1: value1
  #     key2: value2

##########################################################
# SealedSecrets # TODO: Impelent sealed secrets
##########################################################
sealedSecret:
  enabled: false
  additionalLabels:
    #key: value
  annotations:
    #key: value
  files:
#  #nameSuffix of sealedSecret
#     example:
#       encryptedData:
#         name: AgBghrdepGMKmp/rdtJrkBv/CWpJbtmoMsbKQ7QiZZ2kUoLeeTbrDnhmJY03kWKkNW4kN/sQRf6r1vvBEaR4nkHt5f/ayAeaH3NveI3bdb0xv/svvWjyjehwqwr/kNEAVWxRoUij0Y7MyIEAr4hnV2UnrhgvcjPJLNA8bK6spA+kuT328Vpyceyvnm6yArNn1aYlEckaFHrnculHWRpG73iRYxS5GWAY7EdkLXx7OLLWoopHtLcupklYyPfraJzPvBNZ5/PsyjlUBvoQbGV3cZlrdEj1WHj2S1RQ13ddf2WGtMHmY83t9B3LFZAZuA7BBt4rjludbwQm3/tJ5Kas1dDsSIRIIF7MTeum9YfRB8XUz8IxVKQ/JDskeynrWe3VzN/3HFVnv9GGFy+BCVXZKVU/roIRancz+nXkyoOHS722ZpBi53dfLItoS5dG+0EzArMTQzK/KXHz3b1rxp5oWWDNt3WggTiSg2zwy5ZR8VV2ToTDof6UrFmbCZv/kKriyxbVSxIo3KFnvuRiUZ5MwC0TNut4mW3LKyJfHqkUuLa1mYV6tKF58qBnoj/+JaibAIBEudT9hms5U52p7/jKmgHuop7XPEsz4OVwER//Vbv7X6ctoXtyPu6mZyOfOyJHM8Qj/H7/gwMBYhZHQ96DWrVmZOsWSRpZGJni4Xm7rgt2cFj6UtWv6lvl8aOi/HSZVC3TwWZ9mQrk
#       annotations:
#         key: value
#       labels:
#         key: value
#       clusterWide: true
#     example2:
#       encryptedData:
#         name: AgBghrdepGMKmp/rdtJrkBv/CWpJbtmoMsbKQ7QiZZ2kUoLeeTbrDnhmJY03kWKkNW4kN/sQRf6r1vvBEaR4nkHt5f/ayAeaH3NveI3bdb0xv/svvWjyjehwqwr/kNEAVWxRoUij0Y7MyIEAr4hnV2UnrhgvcjPJLNA8bK6spA+kuT328Vpyceyvnm6yArNn1aYlEckaFHrnculHWRpG73iRYxS5GWAY7EdkLXx7OLLWoopHtLcupklYyPfraJzPvBNZ5/PsyjlUBvoQbGV3cZlrdEj1WHj2S1RQ13ddf2WGtMHmY83t9B3LFZAZuA7BBt4rjludbwQm3/tJ5Kas1dDsSIRIIF7MTeum9YfRB8XUz8IxVKQ/JDskeynrWe3VzN/3HFVnv9GGFy+BCVXZKVU/roIRancz+nXkyoOHS722ZpBi53dfLItoS5dG+0EzArMTQzK/KXHz3b1rxp5oWWDNt3WggTiSg2zwy5ZR8VV2ToTDof6UrFmbCZv/kKriyxbVSxIo3KFnvuRiUZ5MwC0TNut4mW3LKyJfHqkUuLa1mYV6tKF58qBnoj/+JaibAIBEudT9hms5U52p7/jKmgHuop7XPEsz4OVwER//Vbv7X6ctoXtyPu6mZyOfOyJHM8Qj/H7/gwMBYhZHQ96DWrVmZOsWSRpZGJni4Xm7rgt2cFj6UtWv6lvl8aOi/HSZVC3TwWZ9mQrk

##########################################################
# Additional Secrets
##########################################################
secret:
  enabled: false
  additionalLabels:
    # key: value
  annotations:
    # key: value
  files:
#  nameSuffix of Secret
#   credentials:
#     data:
#       secretKey1: secretValue1
#       secretKey2: secretValue2
#   password:
#     data:
#       secretKey1: secretValue1
#       secretKey2: secretValue2
#   apiKey:
#     stringData:
#       secretKey1: secretValue1
#       secretKey2: secretValue2
#   secondApiKeu:
#     encodedData:
#       secretKey1: dGVzdFZhbHVl
#       secretKey2: dGVzdFZhbHVl

##########################################################
# Service Monitor to collect Prometheus metrices
##########################################################
serviceMonitor:
  enabled: false

  # Additional labels
  additionalLabels:
    # key: value

  # Additional annotations
  annotations:
    # key: value

  # List of the endpoints of service from which prometheus will scrape data
  endpoints:
  - interval: 5s
    path: /actuator/prometheus
    port: http


##########################################################
# PrometheusRule object for defining application
# alerting rules
##########################################################
prometheusRule:
  enabled: false

  # PrometheusRule labels
  additionalLabels:
    # prometheus: stakater-workload-monitoring
    # role: alert-rules

  # Groups with alerting rules. Read more here [https://docs.openshift.com/container-platform/4.7/rest_api/monitoring_apis/prometheusrule-monitoring-coreos-com-v1.html]

  groups: []
    # - name: example-app-uptime
    #   rules:
    #     - alert: ExampleAppDown
    #       annotations:
    #         message: >-
    #           The Example App is Down (Test Alert)
    #       expr: up{namespace="test-app"} == 0
    #       for: 1m
    #       labels:
    #         severity: critical

##########################################################
# External Secrets
##########################################################
externalSecret:
  enabled: false

  # Default SecretStore for all externalsecrets defines which SecretStore to use when fetching the secret data
  secretStore:
    name: tenant-vault-secret-store
    #kind: ClusterSecretStore # Defaults to SecretStore if not specified 

  # RefreshInterval is the amount of time before the values reading again from the SecretStore provider
  refreshInterval: "1m"
  files:
    # mongodb:
    # # Data defines the connection between the Kubernetes Secret keys and the Provider data
    #   data:
    #      mongo-password:
    #        remoteRef: 
    #           key: monodb
    #           property: passowrd
    #   secretStore:
    #      name: secret-store-name-2    # specify if value is other than default secretstore
    #   labels:
    #      stakater.com/app: mongodb 
    #   #
    # postgres:
      ## Used to fetch all properties from the Provider key
      #   dataFrom:
      #     key: postgres

##########################################################
# grafanaDashboard object for defining application
# Grafana Dashboard
##########################################################
grafanaDashboard:
  enabled: false

  # GrafanaDashboard additonal labels
  additionalLabels:
    # grafanaDashboard: grafana-operator

  # GrafanaDashboard annotations
  annotations:
    # key: value

  # GrafanaDashboard contents
  # this includes pairs of dashboard name and associated json content
  # Accoroding to GrafanaDashboard behavior, if both url and json are specified then the GrafanaDashboard content will be updated with fetched content from url
  contents:
    # dashboard-name-1:
    #   json: |-
    #     {
    #       "data"
    #     }
    #   url: http://hostname/path/to/file.json
    # dashboard-name-2:
    #   json: |-
    #     {
    #       "data"
    #     }
    #   url: http://hostname/path/to/file.json
    
    # dashboard-test-name-2:
    #   allowCrossNamespaceImport: true
    #   configMapRef:
    #     key: json
    #     name: storage-observability-definition
    #   datasources:
    #     - datasourceName: Test
    #       inputName: DS_PROMETHEUS
    #   folder: Storage Observability
    #   instanceSelector:
    #     matchLabels:
    #       app: test-2

##########################################################
# Backup object for creating back using OADP/Velero
##########################################################
backup:
  enabled: false
